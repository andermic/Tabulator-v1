Note: The code files listed below were developed using Python 2.6.2. They will
 require at least Python 2.5, but will not run with Python 3x.


ballotInfoClasses.py:

   This contains a definition of the ballot_info data structure used by
    testDataGenerator.py and tabulator.py. This implementation simply mimics the
    specs given here:
    https://wiki.trustthevote.org/index.php/BallotInfo
   

testDataGenerator.py:

   The purpose of TestDataGenerator.py is to allow a user to generate a random
    election template, and also allow them to generate random vote counts using
    that election. There are two syntactical forms for command line arguments,
    I'll demonstrate them by example:

   1.) python testDataGenerator.py election election.yaml:
       This generates a sample election template, and outputs the results into a
       file in yaml format. By "template", I mean that all of the members in
       the ballot_info data structure like dist_id, voting_method_id, name,
       etc. are initialized . . . with the exception of the actual vote
       counts. In this example `election.yaml` is the name of the output file
       created/overwritten.

   2.) python testDataGenerator.py counts 2 election.yaml sampleballots.yaml
       This syntax uses an election template (which will have been generated
       already by the first syntactical form) to generate a given number of
       ballot_info records that fit the template, with random values
       given to each candidate's counts field. The results are outputted
       into a file in yaml format. In this example, the number of records
       generated in the output file is 2, the election template is stored in
       `election.yaml`, and the results are outputted into file
       `sampleballots.yaml`.


helloWorldTabulator.py:

   This app is a precursor to a fully functional tabulator. It simply takes four
    command line arguments; the last argument will be treated as a filename that
    receives the output "Hello world."


tabulator.py:

   Tabulator.py is the implementation of the initial tabulator. It is called
    from the command line with 5 arguments, like this:

   python tabulator.py election.yaml sampleballots1.yaml sampleballots2.yaml
    merge.yaml report

   In this example, all of the data members in the election template stored in
    `election.yaml` are compared to the data members of the records in
    `sampleballots1` and `sampleballots2`. If the sample ballot record files do
    not exist or are not consistent with the election template, an error message
    is outputted to the screen and sent to the `report` file, and the program
    terminates. If the sample ballot files are valid, this information is also
    recorded in `report`, and all of the records of both files are merged
    together into one record in one file, `merge.yaml`. A list of the cumulative
    vote counts found for each candidate is also outputted into `report`.


Here is an example of how testDataGenerator.py and tabulator.py can be used
 together with a sequence of commands:

   python testDataGenerator.py election election.yaml
   python testDataGenerator.py counts 2 election.yaml sampleballots1.yaml
   python testDataGenerator.py counts 2 election.yaml sampleballots2.yaml
   python tabulator.py election.yaml sampleballots1.yaml sampleballots2.yaml
    merge.yaml report

   These commands generate an election template, then generate two ballot record
    files that conform to the format of that sample election, then merge the two
    ballot record files together and generate a report.


Last updated by Mike Anderson.
Last updated on Aug 21, 2009.
