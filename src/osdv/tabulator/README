Note: The source files listed below were developed using Python 2.6.2. They will
      require at least 2.6 to run, but will not run with backwards
      incompatible Python 3.0.

A python yaml library is also required for serialization/deserialization, and
any such library should work. These source files were developed with PyYaml
version 3.08, which is available at http://www.pyyaml.org.


TEST DATA GENERATOR

The test data generator is responsible for randomly generating data for three 
types of files:

   * Jurisdiction slates, which logically represent the precincts, districts,
     and contests associated with a randomly generated jurisdiction.
   * Precinct contestlists, which logically represent the contests associated 
     with a randomly generated precinct (think jurisdiction slate, but without
     precinct and district information).
   * Ballot counter totals, which logically represent a set of contests pulled
     from a sample election (i.e., a jurisdiction slate or precinct 
     contestlist), filled in with voting count data for every candidate. 

Generating Jurisdiction Slates

USAGE: test_data_generator.py jurisdiction output_name [FLAGS]
test_data_generator.py generates jurisdiction slates in yaml and xml formats.
If no extra arguments are given, hardcoded default values specify the number
of contests, the number of candidates per contest, the number of districts,
and the number of precincts that the output files will contain. These fields
can also be specified with the following flags:

   -cn
       Specifies the exact number of candidates n generated within each 
       contest. 

   -cln
       Specifies a lower bound n for the number of candidates generated within
       each contest. Defaults are used if -cu is not also included, or if the
       given lower bound is larger than the given upper bound. Default value is
       2. 

   -cun
       Specifies an upper bound n for the number of candidates generated within
       each contest. Defaults are used if -cl is not also included, or if the 
       given lower bound is larger than the given upper bound. Default value is
       4. 

   -Cn
       Specifies the number of contests n generated. Default value is 10. 

   -dn
       Specifies the number of districts n generated. Defaults are used if -p 
       is not also included. Default value is 8, as in the example jurisdiction 
       found here: http://wiki.trustthevote.org/index.php/Rough_Notes_about_Jurisdiction,_District,_and_Precinct. 

   -pn
       Specifies the number of precincts n generated. Defaults are used if -d 
       is not also included. Default value is 3, as in the example jurisdiction 
       found here: http://wiki.trustthevote.org/index.php/Rough_Notes_about_Jurisdiction,_District,_and_Precinct. 

Generating Precinct Contestlists

USAGE: test_data_generator.py contestlist output_name [FLAGS]
test_data_generator.py allows the user to generate precinct contestlists in a
similar way as jurisdiction slates, in yaml and xml formats. The user can stick 
with hardcoded default values for the number of contests and the number of 
candidates per contest, or can customise generation with the following command-
line flags:

   -cn
       Specifies the exact number of candidates n generated within each 
       contest. 

   -cln
       Specifies a lower bound n for the number of candidates generated within
       each contest. Defaults are used if -cu is not also included, or if the 
       given lower bound is larger than the given upper bound. Default value is
       2. 

   -cun
       Specifies an upper bound n for the number of candidates generated within
       each contest. Defaults are used if -cl is not also included, or if the 
       given lower bound is larger than the given upper bound. Default value is
       4. 

   -Cn
       Specifies the number of contests n generated. Default value is 10. 

Generating Ballot Counter Totals

USAGE: test_data_generator.py counts number_of_records election_template
output_name [FLAGS]
test_data_generator.py generates ballot counter totals in yaml and xml formats. 
Since ballot counter totals can be thought of as election templates filled in 
with random vote count data, users have the following options to customise how
voting counts are generated:

   -1
       Each candidate in every contest gets a vote count of exactly 1. 

   +n
       Specifies the number of vote counts generated for each candidate to be 
       between 0 and n inclusive, default value is 100. 

Some examples

    test_data_generator.py jurisdiction sample_juris
        Generates a jurisdiction slate with the default number of contests, 
        candidates, districts, and precincts. Result is outputted into 
        "sample_juris.yml" and "sample_juris.xml". 

    test_data_generator.py jurisdiction juris1 -cl1 cl8
        Generates a jurisdiction slate with anywhere between 1 and 8 random  
        candidates per contest, with the default number of contests, districts, 
        and precincts. Result is outputted into "juris1.yml" and "juris1.xml". 

    test_data_generator.py jurisdiction j1 -C5 -d10
        Generates a jurisdiction slate with 5 contests, and the default number 
        of candidates and precincts. Since the number of precincts is not 
        specified with the number of districts, default values are used for 
        district generation. Result is outputted into "j1.yml" and "j1.xml". 

    test_data_generator.py contestlist prec1
        Generates a precinct contestlist with the default number of contests 
        and candidates. Result is outputted into "prec1.yml" and "prec1.xml". 

    test_data_generator.py contestlist precinct1 -c5
        Generates a precinct contestlist with the default number of contests 
        and candidates. Result is outputted into "precinct1.yml" and 
        "precinct1.xml". 

    test_data_generator.py counts 2 juris1 bcts
        Generates two ballot counter total records for an election template 
        named juris1. Each candidate gets between 0 and 100 votes inclusive. 
        Results are outputted into "bcts.yml" and "bcts.xml". 

    test_data_generator.py counts 1 prec5 bal_count +250
        Generates a ballot counter total record for an election template named
        prec5. Each candidate gets between 0 and 250 votes inclusive. Result 
        is outputted into "bal_count.yml" and "bal_count.xml". 


MERGER

USAGE: merger.py election_template bct_file1 bct_file2 output_name
merger.py takes as input an election template, and two files which each 
contain one or more ballot counter total records. The merger ensures the given
data is valid and consistent by checking to see that the following conditions
are met:

    * The GUIDS of the given election template and all ballot counter total 
      records must be unique. Duplicate records cannot be merged together.
    * The election template and BCT records must contain all of the fields that 
      are associated with a ballot info structure, candidates, contests, vote 
      count information, and so on. Data with extra fields is not allowed, nor 
      is data with missing fields.
    * Each field must contain values of the proper type, a candidate name must 
      be a string, vote counts must be integers, and so on.
    * The BCTs given must be consistent with the election template given. 
      Contest names, candidate names, all of the various id fields, etc. must 
      match. 

If the inputted data passes validation, the ballot counter total records in 
both files are concatenated together into one structure, and the results are 
outputted into yaml and xml formats. In addition, the merger creates a log of how successful the run was. Note that files generated by the merger can also be given as input to the merger to further

Example

    merger.py juris3 bcts1 bcts2 merged_file
        Attempts to merge the contents of the bcts1 and bcts2 files together, 
        using the election template juris3. If the pass validation and the 
        attempt was successful, the result is outputted into "merged_file.yaml" 
        and "merged_file.xml". A log recording if and when the validation 
        process failed is created in "merged_file.log". 


TABULATOR

USAGE: tabulator.py election_template merged_file
tabulator.py takes as input a file with a set of bct records merged together, 
and aggregates all of that information together to generate reports in a number
of different formats:

    * Yaml and xml reports show voting data broken down by precinct, then by voting type (absentee, early voting, etc.), then by contest and candidate.
    * One csv format displays the aggregated data as a pivot table, where each row of data contains the vote count data associated with a unique 5-tuple: a contest, precinct name, voting type, candidate name, and candidate party.
    * A second csv format displays as a group of tables, each representing a contest. Each column in a table represents a candidate.
    * The final format visualises the data using auto-generated html that makes it a highly readable web page. A group of tables is generated, as with the second csv format. 

Example

    tabulator.py juris1 merged1
        Aggregates the BCT data from merged1, and uses the election template 
        juris1, to generate reports. The results are outputted into 
        "merged1_report.yml", "merged1_report.xml", "merged1_report_pvt.csv", 
        "merged1_report.csv", and "merged1_report.yml". 


AUDIT HEADERS

All of the files generated by the test data generator and the merger contain 
an audit header, which holds meta-data about the file it's included in. The 
audit header contains the following fields:

    * A GUID that uniquely identifies the file.
    * A creation date.
    * The type of data contained within the file (jurisdiction slate, precinct 
      contestlist, etc.).
    * The operator of the machine which generated the file.
    * Information that uniquely identifies the hardware of the machine that 
      generated the file.
    * The name and version number of the software used to generate the file.
    * The provenance of the file, if it was generated by the merger. This field 
      contains the GUIDs of each ballot counter total or merger file used as 
      input in the merging process. 


Written by Mike Anderson
Last Updated: 03/10/10
