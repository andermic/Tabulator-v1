#!/usr/bin/env python
# Python 2.6.2
# Name: tabulator.py
# Author: Mike Anderson
# Created: Aug 5, 2009
# Purpose: To define a class that takes as input a merged BallotInfo
#  file and generates a report

import yaml
import sys
from datetime import date

import audit_header

class Tabulator(object):
    def __init__(self, input_file):
        # Load ballot records from yaml file
        self.input = input_file
        try:
            print self.input + '.yaml'
            stream = open(self.input + '.yaml', 'r')
        except:
            print('Unable to open ' + self.input + '\n')
            exit(0)
        else:
            a = audit_header.AuditHeader()
            a.load_from_file(stream)
            self.b = list(yaml.load_all(stream))

        # Add the vote counts of candidates with the same ID# using
        #  sumation(). Write the vote totals for each candidate to the
        #  report stream.
        self.serialize_csv(self.sumation())

    # Sums up the separate vote counts in each record for each candidate
    #  and returns the cumulative result as a dictionary.
    def sumation(self):
        cont_list = []
        sum_list = []
        for i in range(len(self.b)):
            for j in range(len(self.b[i]['contests'])):
                if i == 0:
                    sum_list.append({})
                    cont_name = self.b[i]['contests'][j]['display_name']
                    sum_list[j]['cont_name'] = cont_name
                    sum_list[j]['cands'] = {}
                for k in range(len(self.b[i]['contests'][j]['candidates'])):
                    n =self.b[i]['contests'][j]['candidates'][k]['display_name']
                    if not sum_list[j]['cands'].has_key(n):
                        sum_list[j]['cands'][n] = 0
                    c_count = self.b[i]['contests'][j]['candidates'][k]['count']
                    sum_list[j]['cands'][n] += c_count
        return sum_list

    # Serializes a list of contests and their respective candidate vote
    #  counts into a .csv format, and outputs them to a file
    def serialize_csv(self, sum_list):
        stream = open(self.input + '_report.csv', 'w')
        stream.write('Election Summary Report,,\n')
        stream.write(
           'Generated by TrustTheVote Tabulation and Reporting Module,,\n')
        d = date.today()
        stream.write('Report generated on, ' +
                     str(d.month) + '-' + str(d.day) + '-' + str(d.year) + '\n')
        if self.input.rfind('/') != -1:
            fname = self.input[self.input.rfind('/') + 1:]
        else:
            fname = self.input
        stream.write('Input BallotInfo File, ' + fname + '_report.csv\n')
        stream.write(',,\n')
        for cont in sum_list:
            stream.write(',,\n')
            stream.write('Contest,Label,Total\n')
            stream.write(cont['cont_name'] + ',Number of Precincts,0\n')
            for name in cont['cands'].keys():
                stream.write(','+ name +','+ str(cont['cands'][name]) +'\n')
        stream.close()

def main():
    # Output a usage message if incorrect number of command line args
    if( len(sys.argv) != 2 ):
        print "Usage: [MERGED INPUT FILE]"
        exit()

    t = Tabulator(sys.argv[1])

    print 'SOVC report created in ' + sys.argv[1] + '_report.csv\n'

    return 0

if __name__ == '__main__': main()
