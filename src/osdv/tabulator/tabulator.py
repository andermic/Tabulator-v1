#!/usr/bin/env python
# Python 2.6.2
# Name: tabulator.py
# Author: Mike Anderson
# Created: Aug 5, 2009
# Purpose: To define a class that takes as input a merged BallotInfo
#  file and generates a report

import yaml
import sys
from datetime import date

import audit_header

class Tabulator(object):
    def __init__(self, args):
        self.precs = 0
        # Load ballot records from yaml file
        self.input = args[0]
        try:
            stream = open(self.input + '.yaml', 'r')
        except:
            print('Unable to open ' + self.input + '\n')
            exit(0)
        else:
            a = audit_header.AuditHeader()
            a.load_from_file(stream)
            self.b = list(yaml.load_all(stream))

        # If a jurisdiction_slate filename was given, then load its
        #  contents
        if len(args) == 2:
            try:
                stream = open(args[1] + '.yaml', 'r')
            except:
                print('Unable to open ' + self.input + '\n')
                exit(0)
            else:
                a = audit_header.AuditHeader()
                a.load_from_file(stream)
                self.juris = yaml.load(stream)
        else:
            self.juris = False

        # Add the vote counts of candidates with the same ID# using
        #  sumation(). Write the vote totals for each candidate to the
        #  report stream.
        self.serialize_csv(self.sumation())

    # Sum up the separate vote counts in each record for each candidate
    #  and return the cumulative result as a dictionary.
    def sumation(self):
        sum_list = {}        
        for i in range(len(self.b)):
            if not sum_list.has_key('Total'):
                sum_list['Total'] = []
            if not sum_list.has_key(self.b[i]['prec_id']):
                self.precs += 1
                sum_list[self.b[i]['prec_id']] = []            
            prec = self.b[i]['prec_id']
            for j in range(len(self.b[i]['contests'])):
                if len(self.b[i]['contests']) != len(sum_list[prec]):
                    cont_id = self.b[i]['contests'][j]['contest_id']
                    sum_list[prec].append({})
                    sum_list[prec][j]['cont_id'] = cont_id
                    sum_list[prec][j]['cands'] = {}
                if i == 0:
                    sum_list['Total'].append({})
                    cont_id = self.b[i]['contests'][j]['contest_id']
                    sum_list['Total'][j]['cont_id'] = cont_id
                    sum_list['Total'][j]['cands'] = {}
                for k in range(len(self.b[i]['contests'][j]['candidates'])):
                    n = self.b[i]['contests'][j]['candidates'][k]['display_name']
                    if not sum_list['Total'][j]['cands'].has_key(n):
                        sum_list['Total'][j]['cands'][n] = 0
                    if not sum_list[prec][j]['cands'].has_key(n):
                        sum_list[prec][j]['cands'][n] = 0
                    c_count = self.b[i]['contests'][j]['candidates'][k]['count']
                    sum_list['Total'][j]['cands'][n] += c_count
                    sum_list[prec][j]['cands'][n] += c_count                    
        return sum_list

    # Serialize a list of contests and their respective candidate vote
    #  counts into a .csv format, and output them to a file
    def serialize_csv(self, sum_list):
        stream = open(self.input + '_report.csv', 'w')
        stream.write('Election Summary Report,,\n')
        stream.write(
           'Generated by TrustTheVote Tabulation and Reporting Module,,\n')
        d = date.today()
        stream.write('Report generated on, ' +
                     str(d.month) + '-' + str(d.day) + '-' + str(d.year) + '\n')
        if self.input.rfind('/') != -1:
            fname = self.input[self.input.rfind('/') + 1:]
        else:
            fname = self.input
        stream.write('Input BallotInfo File, ' + fname + '.yaml\n')
        stream.write(',,\n')

        if self.juris:
            for i in range(len(self.juris['contests'])):
                stream.write(',,\n')
                stream.write(self.juris['contests'][i]['contest_id'] + ',,\n')
                stream.write('Precinct')
                for cand in self.juris['contests'][i]['candidates']:
                    stream.write(',' + cand['display_name'])
                stream.write('\n')
                for prec in sorted(sum_list.keys()):
                    stream.write(prec)
                    for cand in sum_list[prec][i]['cands'].keys():
                        stream.write(',' + str(sum_list[prec][i]['cands'][cand]))
                    stream.write('\n')

        else:
            for cont in sum_list['Total']:
                stream.write(',,\n')
                stream.write('Contest,Label,Total\n')
                stream.write(cont['cont_id'] + \
                             ',Number of Precincts,' + str(self.precs) + '\n')
                for name in cont['cands'].keys():
                    stream.write(','+ name +','+ str(cont['cands'][name]) +'\n')

        stream.close()

def main():
    # Output a usage message if incorrect number of command line args
    if( len(sys.argv) != 2 and len(sys.argv) != 3 ):
        print "Usage: [MERGED INPUT FILE]"
        print "    OR [MERGED INPUT FILE] [JURISDICTION FILE]"
        exit()

    t = Tabulator(sys.argv[1:])

    print 'SOVC report created in ' + sys.argv[1] + '_report.csv\n'

    return 0

if __name__ == '__main__': main()
